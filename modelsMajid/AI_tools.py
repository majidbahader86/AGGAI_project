from django.db import models
from django.contrib.auth.models import User

# Model for AI Tools
# This model represents AI tools available in your application.
#name: Name of the AI tool.
# description: Description of what the AI tool does. 
#model_file: Field to upload the AI model file, stored in the ai_models/ directory. 
# usage_instructions: Instructions on how users (farmers) can effectively use the AI tool.

class AITool(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField()
    model_file = models.FileField(upload_to='ai_models/')
    usage_instructions = models.TextField()

    def __str__(self):
        return self.name



# Model for AI Questions
#Stores questions asked by users related to agricultural problems.
#user: Reference to the user who asked the question.
#question: Text field containing the question asked.
#created_at: Date and time when the question was asked.

class AIQuestion(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    question = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Question by {self.user.username} on {self.created_at}"



# Model for AI Answers
#Stores answers generated by AI models or provided by experts in response to AI questions.
#question: One-to-one relationship with AIQuestion to link answers to specific questions.
#answer: Text field containing the generated or expert-provided answer.


class AIAnswer(models.Model):
    question = models.OneToOneField(AIQuestion, on_delete=models.CASCADE)
    answer = models.TextField()

    def __str__(self):
        return f"Answer to {self.question}"
    
    
# Advanced AI Models- Enhance disease prediction, pest detection, or yield optimization using sophisticated AI algorithms.
class AIModel(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField()
    model_file = models.FileField(upload_to='ai_models/')
    # Add fields for model parameters, accuracy metrics, etc.
    
    def __str__(self):
        return self.name
    
    
# AIResult: Stores results from AI predictions or optimizations.
class AIResult(models.Model):
    model = models.ForeignKey(AIModel, on_delete=models.CASCADE)
    result_data = models.JSONField()  # Example; adjust as per your data structure
    
    def __str__(self):
        return f"Result from {self.model.name}"

